AWSTemplateFormatVersion: 2010-09-09
Resources:
  CreateTodoLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              # Instanciating connection objects with DynamoDB using boto3 dependency
              dynamodb = boto3.resource('dynamodb')
              
              # Getting the table Resources object
              tableResources = dynamodb.Table('resources')
              
              resourceID = event['resourceID']
              title = event['title']
              task = event['task']
            
              # Putting a try/catch to log to user when some error occurs
              try:
                  tableResources.put_item(
                    Item={
                          'resourceID': int(resourceID),
                          'title': title,
                          'task': task
                      }
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Succesfully inserted task!')
                  }
              except:
                  print('Closing lambda function')
                  return {
                          'statusCode': 400,
                          'body': json.dumps('Error saving the task')
                  }
      FunctionName:
        Ref: CreateTodoLambdaFuncName
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: !GetAtt IAMRole.Arn
    DependsOn:
      - ResourcesTable
  ReadTodoLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          def lambda_handler(event, context):
            # TODO implement
            dynamodb = boto3.resource('dynamodb')
            tableResources = dynamodb.Table('resources')
            response = tableResources.scan()
            return {
              'statusCode': 200,
              'body': response['Items']
            }
      FunctionName:
        Ref: ReadTodoLambdaFuncName
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: !GetAtt IAMRole.Arn
  ResourcesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: resources
      AttributeDefinitions:
        - AttributeName: "resourceID"
          AttributeType: "N"
        - AttributeName: "title"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "resourceID"
          KeyType: "HASH"
        - AttributeName: "title"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
    DependsOn:
      - IAMRole
  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name:
        Ref: APIName
    DependsOn:
      - CreateTodoLambdaFunction
      #- ReadTodoLambdaFunction
  APIGatewayPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !GetAtt 
        - APIGatewayRestAPI
        - RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTodoLambdaFuncNameArn}/invocations
          - CreateTodoLambdaFuncNameArn: !GetAtt CreateTodoLambdaFunction.Arn
  APIGatewayGETMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !GetAtt 
        - APIGatewayRestAPI
        - RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadTodoLambdaFuncNameArn}/invocations
          - ReadTodoLambdaFuncNameArn: !GetAtt ReadTodoLambdaFunction.Arn
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayPostMethod
  APIGatewayPostPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt CreateTodoLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  APIGatewayGetPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ReadTodoLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
Parameters:
  CreateTodoLambdaFuncName:
    Type: String
    Default: Create-todo
  ReadTodoLambdaFuncName:
    Type: String
    Default: Read-todo
  DynamoDBTableName:
    Type: String
    Default: Dynamo_api-lambda-db
  APIName:
    Type: String
    Default: API_api-lambda-db
  EnvironmentName:
    Type: String
    Default: Prod
